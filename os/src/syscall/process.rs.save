//! Process management syscalls
use crate::{
    config::MAX_SYSCALL_NUM,
    task::{
        change_program_brk, exit_current_and_run_next, suspend_current_and_run_next, TaskStatus,
    },
};

#[repr(C)]
#[derive(Debug)]
pub struct TimeVal {
    pub sec: usize,
    pub usec: usize,
}

/// Task information
#[allow(dead_code)]
pub struct TaskInfo {
    /// Task status in it's life cycle
    status: TaskStatus,
    /// The numbers of syscall called by task
    syscall_times: [u32; MAX_SYSCALL_NUM],
    /// Total running time of task
    time: usize,
}

/// task exits and submit an exit code
pub fn sys_exit(_exit_code: i32) -> ! {
    trace!("kernel: sys_exit");
    exit_current_and_run_next();
    panic!("Unreachable in sys_exit!");
}

/// current task gives up resources for other tasks
pub fn sys_yield() -> isize {
    trace!("kernel: sys_yield");
    suspend_current_and_run_next();
    0
}

/// YOUR JOB: get time with second and microsecond
/// HINT: You might reimplement it with virtual memory management.
/// HINT: What if [`TimeVal`] is splitted by two pages ?
pub fn sys_get_time(_ts: *mut TimeVal, _tz: usize) -> isize {
    trace!("kernel: sys_get_time");
    //step1
    let mut buffers =
        translated_byte_buffer(current_user_token(), _ts as *const u8, size_of::<TimeVal>());
    //step2
    let us = get_time_us();
    let sec = us / 1_000_000;
    let usec = us % 1_000_000;
    let sec_bytes = sec.to_le_bytes(); 
    let usec_bytes = usec.to_le_bytes(); 
    //step3
    if buffers[0].len() < 8 {
        let len = buffers[0].len();
        buffers[0].copy_from_slice(&sec_bytes[..len]);
        buffers[1][..(8 - len)].copy_from_slice(&sec_bytes[len..]);
        buffers[1][(8 - len)..].copy_from_slice(&usec_bytes);
    } else if buffers[0].len() < 16 {
        buffers[0][..8].copy_from_slice(&sec_bytes);
        let len = buffers[0].len() - 8;
        buffers[0][8..].copy_from_slice(&usec_bytes[..len]);
        buffers[1][..(8 - len)].copy_from_slice(&usec_bytes[len..]);
    } else {
        buffers[0][..8].copy_from_slice(&sec_bytes);
        buffers[0][8..16].copy_from_slice(&usec_bytes);
    }
    0
}

/// YOUR JOB: Finish sys_task_info to pass testcases
/// HINT: You might reimplement it with virtual memory management.
/// HINT: What if [`TaskInfo`] is splitted by two pages ?
pub fn sys_task_info(_ti: *mut TaskInfo) -> isize {
    trace!("kernel: sys_task_info NOT IMPLEMENTED YET!");
    let current = TASK_MANAGER.get_current_task();
    let task_info_list = TASK_INFO_LIST.exclusive_access();
    let current_task_info = &task_info_list[current];
    let current_task_info_byte: [u8; mem::size_of::<TaskInfo>()] =
        unsafe { mem::transmute(*current_task_info) }
    let mut buffers = translated_byte_buffer(
        current_user_token(),
        _ti as *const u8,
        size_of::<TaskInfo>(),
    );
    if buffers[0].len() < size_of::<TaskInfo>() {
        let len = buffers[0].len();
        buffers[0].copy_from_slice(&current_task_info_byte[..len]);
        buffers[1][..(size_of::() - len)].copy_from_slice(&current_task_info_byte[len..]);
    } else {
        buffers[0][..size_of::()].copy_from_slice(&current_task_info_byte);
    }
    0
}

// YOUR JOB: Implement mmap.
pub fn sys_mmap(_start: usize, _len: usize, _port: usize) -> isize {
    trace!("kernel: sys_mmap NOT IMPLEMENTED YET!");
    -1
}

// YOUR JOB: Implement munmap.
pub fn sys_munmap(_start: usize, _len: usize) -> isize {
    trace!("kernel: sys_munmap NOT IMPLEMENTED YET!");
    -1
}
/// change data segment size
pub fn sys_sbrk(size: i32) -> isize {
    trace!("kernel: sys_sbrk");
    if let Some(old_brk) = change_program_brk(size) {
        old_brk as isize
    } else {
        -1
    }
}
